syntax = "proto3";
import "common/store/store.proto";

// Package common provides common messages that is shared between
// the proto contracts.
package common.product;

option go_package = "tokobapak/protobuf/commonpb";
option java_package = "id.my.tokobapak.protobuf";
option java_outer_classname = "Common";
option java_multiple_files = true;
option csharp_namespace = "TokoBapak.Protobuf.CommonSchema";
option cc_enable_arenas = true;

// Product specifies a single product including the seller that is selling the product.
message Product {
  // Specifies product ID, generated by TokoBapak system
  string id = 1;
  // Product's name
  string name = 2;
  // Product's description
  string description = 3;
  // Images to define the product.
  repeated Image photos = 4;
  // Product variants. If the product variant entry is just one, meaning a single product,
  // then the frontend should only display it as if it has no variants.
  repeated ProductVariant variants = 5;
  // Keywords (synonymous with tags) are helpful text that represent the product.
  // It helps the searching mechanism to better find a product based on the search query.
  repeated string keywords = 6;
  // Store specifies the seller that is selling this product.
  common.store.Store store = 7;
}

// Specifies a single product variant. Contains combination of attributes.
message ProductVariant {
  // Specifies variant ID, generated by TokoBapak system
  string id = 1;
  // Variant's name
  string name = 2;
  // Product variant's price in TokoBapak's special currency.
  //
  // Maximum value of unsigned 64 bit integer is 18,446,744,073,709,551,615.
  // I don't know why people would set their product price as high as that.
  uint64 price = 4;
  // Product variant's dimension
  Dimension dimension = 5;
  // Product variant's weight in grams.
  // If the product is a digital product, then it's allowed
  // to set the value to 0.
  //
  // Maximum value of unsigned 32 bit integer is 4,294,967,295.
  // It's equivalent to 4294 tons (metric system).. which does not
  // makes any sense for everyone. Unless you're selling like
  // an atomic bomb or something.
  uint32 weight_grams = 6;
  // The amount of available quantity of variant in stock
  uint64 stock_quantity = 7;
  // Product variant's condition.
  ItemCondition item_condition = 8;
  // Attributes applied to current variant.
  repeated Attribute attributes = 9;
  // Single image/photo to explicitly define this variant.
  // Frontend should switch to displaying this specific image if the user's
  // chose this product variant.
  optional Image photos = 10;

  // Keywords (synonymous with tags) are helpful text that represent the product variant.
  // It helps the searching mechanism to better find a product based on the search query.
  repeated string keywords = 11;
  // Additional specification provides a map of metadata for each variant.
  // Sellers should use it for specifying product's information.
  //
  // Example:
  //   Material: polyester
  //   Country of origin: Spain
  map<string, string> additional_specification = 12;
}

// Dimension specifies a dimension set in centimeters (metric system)
// for a specific product.
message Dimension {
  // Height is the distance from the base of something to the top.
  // The maximum value is 4294967295 centimeters or 42949,67 kilometers.
  uint32 height_centimeters = 1;
  // Width is the measurement of the extent of something from side to side.
  // It is interchangeable with depth.
  // The maximum value is 4294967295 centimeters or 42949,67 kilometers.
  uint32 width_centimeters = 2;
  // Depth is the measurement or dimension downward, backward, or inward.
  // It is interchangeable with width.
  // The maximum value is 4294967295 centimeters or 42949,67 kilometers.
  uint32 depth_centimeters = 3;
}

// Specifies an item's condition
enum ItemCondition {
  // Unspecified. This should be treated as NULL or empty value.
  ITEM_CONDITION_UNSPECIFIED = 0;

  // The brand-new, unused, unopened, undamaged item is in its original packaging (where packaging is applicable).
  // Packaging should be the same as what is found in a retail store, unless the item is handmade or was packaged
  // by the manufacturer in non-retail packaging, such as an unprinted box or plastic bag.
  ITEM_CONDITION_NEW = 1;

  // The item is in excellent, new condition with no functional defects. The item may be missing original packaging
  // and may have been used for testing or demo purposes. The item includes accessories found with
  // the original product and may include a warranty.
  ITEM_CONDITION_NEW_OPEN_BOX = 2;

  // The item is in a pristine, like-new condition. It has been professionally inspected, cleaned,
  // and refurbished by the manufacturer or a manufacturer-approved vendor to meet manufacturer specifications.
  // The item will be in new packaging with original or new accessories.
  ITEM_CONDITION_CERTIFIED_REFURBISHED = 3;

  // The item has been restored to working order by the seller or a third party.
  // This means the item was inspected, cleaned, and repaired to full working order and is in excellent condition.
  // This item may or may not be in original packaging.
  ITEM_CONDITION_SELLER_REFURBISHED = 4;

  // The item was previously used. The item may have some signs of cosmetic wear, but it is fully operational
  // and functions as intended. This item may be a floor model or store return that has been used.
  ITEM_CONDITION_USED = 5;

  // The item does not function as intended and is not fully operational. This includes items that are defective
  // in ways that render them difficult to use, items that require service or repair,
  // or items missing essential components.
  ITEM_CONDITION_DAMAGED = 6;
}

// Attribute specifies a product's attribute. A simple example of an attribute
// is a product's color. The "category" field is ATTRIBUTE_CATEGORY_COLOR,
// the "category_others" field is left empty, and the "content" field can be..
// purple!
message Attribute {
  // Specifies attribute ID, a unique ID generated by TokoBapak system.
  string id = 1;
  // Specifies attribute category. It's an enum to make sure people don't do duplicates like
  // color and colour, size and ukuran, and so on forth.
  AttributeCategory category = 2;
  // If the category is set to ATTRIBUTE_CATEGORY_OTHERS, this field must not be left blank.
  string category_others = 3;
  // The inner value of the attribute. It must not be left blank.
  string content = 4;
}

// Attribute category specify an enum to make sure people don't do duplicate naming.
enum AttributeCategory {
  // Unspecified. This should be treated as NULL or empty value.
  ATTRIBUTE_CATEGORY_UNSPECIFIED = 0;
  ATTRIBUTE_CATEGORY_SIZE = 1;
  ATTRIBUTE_CATEGORY_COLOR = 2;
  ATTRIBUTE_CATEGORY_OTHERS = 99;
}

// Specifies an image with alternate text
message Image {
  // The URL of the photo
  string url = 1;
  // Alternate text is for the alt attribute on HTML tag
  string alternate_text = 2;
}