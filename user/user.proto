syntax = "proto3";

import "common/common.proto";

// Package user handle user-related stuff
package user;

option go_package = "tokobapak/protobuf/userpb";
option java_package = "id.my.tokobapak.protobuf";
option java_outer_classname = "User";
option java_multiple_files = true;
option csharp_namespace = "TokoBapak.Protobuf.UserSchema";
option cc_enable_arenas = true;

message Authentication {
  string access_token = 1;
}

// Gender specifies.. gender.
enum Gender {
  // Null-value gender
  GENDER_UNSPECIFIED = 0;
  GENDER_FEMALE = 1;
  GENDER_MALE = 2;
  GENDER_OTHER = 3;
}

// Specififes the current state of the user.
enum State {
  STATE_UNSPECIFIED = 0;
  // Registered but haven't finished email verification.
  STATE_PENDING_VALIDATION = 1;
  // Registered and has verify their email.
  STATE_VALIDATED = 2;
  // Banned because of some violation.
  STATE_BANNED = 3;
}

// Specifies an address that have longitude and latitude coordinate.
// The data will be acquired after 
message Address {
  // For creating new address, this should be left empty.
  // It will be generated by the service.
  string guid = 1;
  string name = 2;
  string full_address = 3;
  string notes = 4;
  string recipient_name = 5;
  string recipient_phone_number = 6;
  double longitude = 7;
  double latitude = 8;
}

message UserAggregateReply {
  string guid = 1;
  string full_name = 2;
  string date_of_birth = 3;
  Gender gender = 4;
  string email = 5;
  string phone_number = 6;
  string avatar_url = 7;
  repeated Address addresses = 8;
  State state = 9;
  // Can be empty. Hashed guid is used to replace this.
  string username = 10;
}

// Handles core entry for user such as registration and permanent deletion.
service Listing {
  // Handles registration. Only ask for email and password.
  // It should send an email verification to the user, continuing with the VerifyEmail rpc.
  rpc Register(RegisterRequest) returns (common.EmptyReply) {}
  // Once verified, it will set the user status from STATE_PENDING_VERIFICATION
  // to STATE_VALIDATED.
  rpc VerifyEmail(VerifyEmailRequest) returns (common.EmptyReply) {}
  // Request a confirmation email for permanent deletion.
  rpc DeletePermanently(DeleteRequest) returns (common.EmptyReply) {}
  // Verify that the user is indeed wants and aware of their permanent account deletion.
  rpc VerifyPermanentDeletion(VerifyPermanentDeletionRequest) returns (common.EmptyReply) {}
}

message RegisterRequest {
  string full_name = 1;
  string email = 2;
}

message VerifyEmailRequest {
  string email = 1;
  string secret_code = 2;
}

message DeleteRequest {
  Authentication auth = 1;
}

message VerifyPermanentDeletionRequest {
  string email = 1;
  string secret_code = 2;
}

// Handles everything user profile-related.
service Profile {
  // Get user's profile.
  rpc Get(GetProfileRequest) returns (UserAggregateReply) {}
  // Get another user's public profile
  rpc GetPublicProfile(GetPublicProfileRequest) returns (GetPublicProfileReply) {}
  // Set user's profile data
  rpc EditProfile(EditProfileRequest) returns (UserAggregateReply) {}
  // Change of email address requires another layer of verification that they
  // are using email address that are correct and approved.
  // They will continue with the VerifyChangedEmailAddress rpc.
  rpc ChangeEmailAddress(ChangeEmailAddressRequest) returns (common.EmptyReply) {}
  // It verifies the changed email address that are requested previously.
  rpc VerifyChangedEmailAddress(VerifyChangedEmailAddressRequest) returns (UserAggregateReply) {}
}

message GetProfileRequest {
  Authentication auth = 1;
}

message GetPublicProfileRequest {
  // auth is optional, it will only returns whether we follow the person
  Authentication auth = 1;
  string username = 2;
}

message GetPublicProfileReply {
  string full_name = 1;
  string username = 2;
  string avatar_url = 3;
  
  // Only returned when access token is provided previously
  bool following = 4;
  // This means you follow each other
  bool followed_back = 5;
}

message EditProfileRequest {
  Authentication auth = 1;
  string full_name = 2;
  string date_of_birth = 3;
  Gender gender = 4;
  // Avatar url is acquired using the image upload API (soon)
  string avatar_url = 5;
  string username = 6;
}

message ChangeEmailAddressRequest {
  Authentication auth = 1;
  string email = 2;
}

message VerifyChangedEmailAddressRequest {
  Authentication auth = 1;
  string secret_code = 2;
}